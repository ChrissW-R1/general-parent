# This is a basic workflow to help you get started with Actions

name: Maven - Release Build

# Controls when the action will run.
on:
    # Triggers the workflow on push or pull request events but only for version branches
    push:
        branches: ["version/release/*"]
    pull_request:
        branches: ["version/release/*"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    release:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            -   name: Git Checkout
                uses: actions/checkout@v4
            -   name: Setup Git user
                run:  |
                      git config --global user.name "ChrissW-R1"
                      git config --global user.email "contact@ChrissW-R1.me"
            -   name: Setup JDK 11
                uses: actions/setup-java@v4
                with:
                    distribution:    'temurin'
                    java-version:    '11'
                    cache:           maven
                    server-id:       project-repo # Value of the distributionManagement/repository/id field of the pom.xml
                    settings-path:   ${{ github.workspace }} # location for the settings.xml file
                    gpg-passphrase:  'gpg_passphrase'
                    gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

            -   name: Build with Maven
                env:
                    GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
                    ci_git_user:              ${{ vars.CI_GIT_USER }}
                    nvd_api_key:              ${{ secrets.NVD_API_KEY }}
                    gpg_key:                  ${{ secrets.GPG_PRIVATE_KEY }}
                    gpg_keyid:                ${{ secrets.GPG_KEYID }}
                    gpg_passphrase:           ${{ secrets.GPG_PASSPHRASE }}
                    mvnsiteuploader_password: ${{ secrets.MVNSITEUPLOADER_PASSWORD }}
                    mvn_central_user:         ${{ secrets.MVN_CENTRAL_USER }}
                    mvn_central_token:        ${{ secrets.MVN_CENTRAL_TOKEN }}
                run:  |
                      mvn -B \
                      clean release:prepare release:perform \
                      -e \
                      -s ci_settings.xml --file pom.xml \
                      -Darguments="-s ci_settings.xml -P central-deploy" \
                      -DfullBuild -Ddistribution -Dexecutable \
                      -P central-deploy \
                      -Dusername=${ci_git_user} -Dpassword=${GITHUB_TOKEN}

            -   id:   get_tag
                name: Get latest tag
                run:  echo "tag_name=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
            -   id:   create_release
                name: Create GitHub Release
                uses: actions/create-release@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    tag_name:     ${{ steps.get_tag.outputs.tag_name }}
                    release_name: ${{ steps.get_tag.outputs.tag_name }}
                    draft:        false
                    prerelease:   false

            -   name:              Maven Default Deployment
                working-directory: target/checkout
                env:
                    GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
                    ci_git_user:              ${{ vars.CI_GIT_USER }}
                    nvd_api_key:              ${{ secrets.NVD_API_KEY }}
                    gpg_key:                  ${{ secrets.GPG_PRIVATE_KEY }}
                    gpg_keyid:                ${{ secrets.GPG_KEYID }}
                    gpg_passphrase:           ${{ secrets.GPG_PASSPHRASE }}
                    mvnsiteuploader_password: ${{ secrets.MVNSITEUPLOADER_PASSWORD }}
                    mvn_central_user:         ${{ secrets.MVN_CENTRAL_USER }}
                    mvn_central_token:        ${{ secrets.MVN_CENTRAL_TOKEN }}
                run:               |
                                   mvn -B \
                                   deploy \
                                   -e \
                                   -s ../../ci_settings.xml \
                                   -DskipTests \
                                   -DfullBuild
            -   name:              Maven Central Deployment
                working-directory: target/checkout
                env:
                    GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
                    ci_git_user:              ${{ vars.CI_GIT_USER }}
                    nvd_api_key:              ${{ secrets.NVD_API_KEY }}
                    gpg_key:                  ${{ secrets.GPG_PRIVATE_KEY }}
                    gpg_keyid:                ${{ secrets.GPG_KEYID }}
                    gpg_passphrase:           ${{ secrets.GPG_PASSPHRASE }}
                    mvnsiteuploader_password: ${{ secrets.MVNSITEUPLOADER_PASSWORD }}
                    mvn_central_user:         ${{ secrets.MVN_CENTRAL_USER }}
                    mvn_central_token:        ${{ secrets.MVN_CENTRAL_TOKEN }}
                run:               |
                                   mvn -B \
                                   deploy \
                                   -e \
                                   -s ../../ci_settings.xml \
                                   -DskipTests \
                                   -DfullBuild \
                                   -P central-deploy
            -   name:  Upload artifacts to GitHub Release
                env:
                    GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
                    ci_git_user:              ${{ vars.CI_GIT_USER }}
                    nvd_api_key:              ${{ secrets.NVD_API_KEY }}
                    gpg_key:                  ${{ secrets.GPG_PRIVATE_KEY }}
                    gpg_keyid:                ${{ secrets.GPG_KEYID }}
                    gpg_passphrase:           ${{ secrets.GPG_PASSPHRASE }}
                    mvnsiteuploader_password: ${{ secrets.MVNSITEUPLOADER_PASSWORD }}
                    mvn_central_user:         ${{ secrets.MVN_CENTRAL_USER }}
                    mvn_central_token:        ${{ secrets.MVN_CENTRAL_TOKEN }}
                shell: bash
                run:   |
                       set -euo pipefail
                       set -x

                       TAG="${{ steps.get_tag.outputs.tag_name }}"
                       echo "Upload to GitHub release: $TAG"

                       echo "::group::Prepare modules list"
                       ROOT_BUILD_DIR=$(mvn -B initialize help:evaluate -e -s ci_settings.xml -Dexpression="project.build.directory" -Ddistribution -q -DforceStdout)
                       MODULES_LIST_FILENAME="modules-list.txt"
                       MODULES_LIST="$ROOT_BUILD_DIR/$MODULES_LIST_FILENAME"
                       if ! [[ -f "$MODULES_LIST" ]]; then
                         echo "No modules list found in root build directory: $ROOT_BUILD_DIR! Try checkout directory."
                         CHECKOUT_DIR="$ROOT_BUILD_DIR/checkout"
                         CHECKOUT_BUILD_DIR="$(mvn -B initialize help:evaluate -e -s ci_settings.xml -f "$CHECKOUT_DIR/pom.xml" -Dexpression=project.build.directory -Ddistribution -q -DforceStdout)"
                         MODULES_LIST="$CHECKOUT_BUILD_DIR/$MODULES_LIST_FILENAME"
                       fi

                       MODULES=( "__ROOT__" )
                       if [[ -f "$MODULES_LIST" ]]; then
                         echo "Reading modules from: $MODULES_LIST"
                         while IFS= read -r MODULE || [[ -n "$MODULE" ]]; do
                           MODULES+=("$MODULE")
                         done < "$MODULES_LIST"
                       else
                            echo "No modules list found at: $MODULES_LIST"
                            echo "Using only default module: __ROOT__"
                       fi
                       echo "::endgroup::"

                       for MODULE in "${MODULES[@]}"; do
                         [[ -z "${MODULE//[$'\t\r\n ']/}" ]] && continue
                         [[ "${MODULE:0:1}" == "#" ]] && continue

                         echo "::group::Module: $MODULE"

                         if [[ "${MODULE}" == "__ROOT__" ]]; then
                           MODULE=""
                         fi

                         BUILD_DIR=$(mvn -B initialize help:evaluate -e -s ci_settings.xml -Dexpression="project.build.directory" -Ddistribution -q -DforceStdout -pl "$MODULE")
                         FILENAME=$(mvn -B initialize help:evaluate -e -s ci_settings.xml -Dexpression="project.build.artifact.fileName" -Ddistribution -q -DforceStdout -pl "$MODULE")
                         FINAL_NAME=$(mvn -B initialize help:evaluate -e -s ci_settings.xml -Dexpression="project.build.finalName" -Ddistribution -q -DforceStdout -pl "$MODULE")

                         ARTIFACT_PATH=${BUILD_DIR}/${FILENAME}
                         echo "Uploading: $ARTIFACT_PATH"
                         gh release upload "$TAG" "$ARTIFACT_PATH" --clobber || echo "Upload of $ARTIFACT_PATH failed!"

                         for CLASSIFIER in sources javadoc; do
                           ARTIFACT_PATH="${BUILD_DIR}/${FINAL_NAME}-${CLASSIFIER}.jar"
                           if [[ -f "$ARTIFACT_PATH" ]]; then
                             echo "Uploading: $ARTIFACT_PATH"
                             gh release upload "$TAG" "$ARTIFACT_PATH" --clobber || echo "Upload of $ARTIFACT_PATH failed!"
                           fi
                         done

                         echo "::endgroup::"
                       done
