/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
{
	"env":           {
		"browser": true,
		"es6":     true,
		"node":    true
	},
	"extends":       [
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"prettier"
	],
	"parser":        "@typescript-eslint/parser",
	"parserOptions": {
		"project":    "tsconfig.json",
		"sourceType": "module"
	},
	"plugins":       [
		"@typescript-eslint",
		"@typescript-eslint/tslint"
	],
	"rules":         {
		"@angular-eslint/component-class-suffix":           "error",
		"@angular-eslint/directive-class-suffix":           "error",
		"@angular-eslint/no-input-rename":                  "off",
		"@angular-eslint/no-output-on-prefix":              "error",
		"@angular-eslint/no-output-rename":                 "off",
		"@angular-eslint/use-pipe-transform-interface":     "error",
		"@typescript-eslint/array-type":                    [
			"error",
			{
				"default": "array"
			}
		],
		"@typescript-eslint/ban-types":                     [
			"error",
			{
				"types": {
					"Object":   {
						"message": "Avoid using the `Object` type. Did you mean `object`?"
					},
					"Function": {
						"message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
					},
					"Boolean":  {
						"message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
					},
					"Number":   {
						"message": "Avoid using the `Number` type. Did you mean `number`?"
					},
					"String":   {
						"message": "Avoid using the `String` type. Did you mean `string`?"
					},
					"Symbol":   {
						"message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
					}
				}
			}
		],
		"@typescript-eslint/consistent-type-definitions":   "error",
		"@typescript-eslint/dot-notation":                  "off",
		"@typescript-eslint/explicit-member-accessibility": [
			"error",
			{
				"accessibility": "explicit",
				"overrides":     {
					"accessors":           "explicit",
					"constructors":        "explicit",
					"parameterProperties": "explicit"
				}
			}
		],
		"@typescript-eslint/indent":                        [
			"error",
			"tabs"
		],
		"@typescript-eslint/interface-name-prefix":         "off",
		"@typescript-eslint/member-delimiter-style":        [
			"error",
			{
				"multiline":  {
					"delimiter":   "semi",
					"requireLast": true
				},
				"singleline": {
					"delimiter":   "semi",
					"requireLast": false
				}
			}
		],
		"@typescript-eslint/member-ordering":               "error",
		"@typescript-eslint/no-explicit-any":               "off",
		"@typescript-eslint/no-non-null-assertion":         "error",
		"@typescript-eslint/no-parameter-properties":       "off",
		"@typescript-eslint/no-unused-expressions":         "error",
		"@typescript-eslint/prefer-for-of":                 "error",
		"@typescript-eslint/prefer-function-type":          "error",
		"@typescript-eslint/quotes":                        [
			"error",
			"double"
		],
		"@typescript-eslint/semi":                          [
			"error",
			"always"
		],
		"@typescript-eslint/triple-slash-reference":        [
			"error",
			{
				"path":  "always",
				"types": "prefer-import",
				"lib":   "always"
			}
		],
		"@typescript-eslint/unified-signatures":            "error",
		"arrow-body-style":                                 [
			"error",
			"always"
		],
		"brace-style":                                      [
			"error",
			"1tbs"
		],
		"camelcase":                                        "error",
		"complexity":                                       "off",
		"constructor-super":                                "error",
		"curly":                                            "error",
		"eol-last":                                         "error",
		"eqeqeq":                                           [
			"error",
			"always"
		],
		"guard-for-in":                                     "error",
		"id-blacklist":                                     [
			"error",
			"any",
			"Number",
			"number",
			"String",
			"string",
			"Boolean",
			"boolean",
			"Undefined",
			"undefined"
		],
		"id-match":                                         "error",
		"import/no-deprecated":                             "warn",
		"jsdoc/check-alignment":                            "error",
		"jsdoc/check-indentation":                          "error",
		"jsdoc/newline-after-description":                  "error",
		"max-classes-per-file":                             [
			"error",
			1
		],
		"max-len":                                          [
			"error",
			{
				"code": 80
			}
		],
		"new-parens":                                       "error",
		"no-bitwise":                                       "off",
		"no-caller":                                        "error",
		"no-cond-assign":                                   "off",
		"no-console":                                       [
			"warn",
			{
				"allow": [
					"warn",
					"dir",
					"timeLog",
					"assert",
					"clear",
					"count",
					"countReset",
					"group",
					"groupEnd",
					"table",
					"dirxml",
					"error",
					"groupCollapsed",
					"Console",
					"profile",
					"profileEnd",
					"timeStamp",
					"context"
				]
			}
		],
		"no-debugger":                                      "error",
		"no-empty":                                         "error",
		"no-eval":                                          "error",
		"no-fallthrough":                                   "error",
		"no-invalid-this":                                  "warn",
		"no-multiple-empty-lines":                          [
			"error",
			{
				"max": 2
			}
		],
		"no-new-wrappers":                                  "error",
		"no-restricted-imports":                            [
			"error",
			"rxjs",
			"rxjs/Rx",
			"lodash"
		],
		"no-shadow":                                        [
			"error",
			{
				"hoist": "all"
			}
		],
		"no-throw-literal":                                 "error",
		"no-trailing-spaces":                               "error",
		"no-undef-init":                                    "error",
		"no-underscore-dangle":                             "error",
		"no-unsafe-finally":                                "error",
		"no-unused-labels":                                 "off",
		"object-shorthand":                                 "error",
		"one-var":                                          [
			"error",
			"never"
		],
		"prefer-arrow/prefer-arrow-functions":              "error",
		"radix":                                            "error",
		"spaced-comment":                                   [
			"error",
			"always",
			{
				"markers": [
					"/"
				]
			}
		],
		"use-isnan":                                        "error",
		"valid-typeof":                                     "error",
		"@typescript-eslint/tslint/config":                 [
			"error",
			{
				"rules": {
					"use-host-property-decorator":   true,
					"use-input-property-decorator":  true,
					"use-life-cycle-interface":      true,
					"use-output-property-decorator": true,
					"whitespace":                    [
						true,
						"check-branch",
						"check-decl",
						"check-operator",
						"check-separator",
						"check-type",
						"check-typecast",
						"check-type-operator",
						"check-preblock"
					]
				}
			}
		]
	}
}
