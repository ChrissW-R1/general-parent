# This is a basic workflow to help you get started with Actions

name: Maven - Release Build

# Controls when the action will run.
on:
    # Triggers the workflow on push or pull request events but only for version branches
    push:
        branches: ["version/release/*"]
    pull_request:
        branches: ["version/release/*"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    release:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            -   name: Git Checkout
                uses: actions/checkout@v4
            -   name: Setup Git user
                run:  |
                      git config --global user.name "ChrissW-R1"
                      git config --global user.email "contact@ChrissW-R1.me"
            -   name: Setup JDK ${java.version}
                uses: actions/setup-java@v4
                with:
                    distribution:    'temurin'
                    java-version:    '${java.version}'
                    cache:           maven
                    server-id:       project-repo # Value of the distributionManagement/repository/id field of the pom.xml
                    settings-path:   ${{ github.workspace }} # location for the settings.xml file
                    gpg-passphrase:  'gpg_passphrase'
                    gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

            -   name: Build with Maven
                run:  mvn -B clean release:prepare release:perform -e -DfullBuild -Ddistribution -Dexecutable -s ci_settings.xml --file pom.xml -P central-deploy -Dusername=${ci_git_user} -Dpassword=${GITHUB_TOKEN}
                env:
                    GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
                    ci_git_user:              ${{ env.CI_GIT_USER }}
                    nvd_api_key:              ${{ secrets.NVD_API_KEY }}
                    gpg_key:                  ${{ secrets.GPG_PRIVATE_KEY }}
                    gpg_keyid:                ${{ secrets.GPG_KEYID }}
                    gpg_passphrase:           ${{ secrets.GPG_PASSPHRASE }}
                    mvnsiteuploader_password: ${{ secrets.MVNSITEUPLOADER_PASSWORD }}
                    mvn_central_user:         ${{ secrets.MVN_CENTRAL_USER }}
                    mvn_central_token:        ${{ secrets.MVN_CENTRAL_TOKEN }}

            -   id:   get_tag
                name: Get latest tag
                run:  echo "tag_name=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
            -   id:   artifact_info
                name: Get artifact file path from Maven
                run:  |
                      echo "Resolving Maven artifact info..."

                      FILENAME=$(mvn initialize help:evaluate -Dexpression="project.build.artifact.fileName" -Ddistribution -q -DforceStdout)
                      DIRECTORY=$(mvn initialize help:evaluate -Dexpression="project.build.directory" -Ddistribution -q -DforceStdout)
                      EXTENSION=$(mvn initialize help:evaluate -Dexpression="project.build.artifact.extension" -Ddistribution -q -DforceStdout)

                      # MIME type mapping
                      case "$EXTENSION" in
                        pom)           MIME="text/xml" ;;
                        zip)           MIME="application/zip" ;;
                        *)             MIME="application/java-archive" ;; # Fallback
                      esac

                      echo "filename=$FILENAME" >> "$GITHUB_OUTPUT"
                      echo "directory=$DIRECTORY" >> "$GITHUB_OUTPUT"
                      echo "mime=$MIME" >> "$GITHUB_OUTPUT"

            -   id:   create_release
                name: Create GitHub Release
                uses: actions/create-release@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    tag_name:     ${{ steps.get_tag.outputs.tag_name }}
                    release_name: Release ${{ steps.get_tag.outputs.tag_name }}
                    draft:        false
                    prerelease:   false
            -   name: Upload JAR Artifact
                uses: actions/upload-release-asset@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    upload_url:         ${{ steps.create_release.outputs.upload_url }}
                    asset_path:         ${{ steps.artifact_info.outputs.directory }}/${{ steps.artifact_info.outputs.filename }}
                    asset_name:         ${{ steps.artifact_info.outputs.filename }}
                    asset_content_type: ${{ steps.artifact_info.outputs.mime }}
